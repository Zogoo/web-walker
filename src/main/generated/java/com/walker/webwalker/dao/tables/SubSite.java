/*
 * This file is generated by jOOQ.
*/
package com.walker.webwalker.dao.tables;


import com.walker.webwalker.dao.Indexes;
import com.walker.webwalker.dao.Keys;
import com.walker.webwalker.dao.Public;
import com.walker.webwalker.dao.tables.records.SubSiteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubSite extends TableImpl<SubSiteRecord> {

    private static final long serialVersionUID = 1524900533;

    /**
     * The reference instance of <code>public.sub_site</code>
     */
    public static final SubSite SUB_SITE = new SubSite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubSiteRecord> getRecordType() {
        return SubSiteRecord.class;
    }

    /**
     * The column <code>public.sub_site.sub_site_id</code>.
     */
    public final TableField<SubSiteRecord, Integer> SUB_SITE_ID = createField("sub_site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sub_site.site_url</code>.
     */
    public final TableField<SubSiteRecord, String> SITE_URL = createField("site_url", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.sub_site.site_id</code>.
     */
    public final TableField<SubSiteRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sub_site.page_html</code>.
     */
    public final TableField<SubSiteRecord, String> PAGE_HTML = createField("page_html", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sub_site.page_txt</code>.
     */
    public final TableField<SubSiteRecord, String> PAGE_TXT = createField("page_txt", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sub_site.page_css</code>.
     */
    public final TableField<SubSiteRecord, String> PAGE_CSS = createField("page_css", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.sub_site.page_js</code>.
     */
    public final TableField<SubSiteRecord, String> PAGE_JS = createField("page_js", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.sub_site</code> table reference
     */
    public SubSite() {
        this(DSL.name("sub_site"), null);
    }

    /**
     * Create an aliased <code>public.sub_site</code> table reference
     */
    public SubSite(String alias) {
        this(DSL.name(alias), SUB_SITE);
    }

    /**
     * Create an aliased <code>public.sub_site</code> table reference
     */
    public SubSite(Name alias) {
        this(alias, SUB_SITE);
    }

    private SubSite(Name alias, Table<SubSiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubSite(Name alias, Table<SubSiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUB_SITE_PKEY, Indexes.SUB_SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SubSiteRecord> getPrimaryKey() {
        return Keys.SUB_SITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SubSiteRecord>> getKeys() {
        return Arrays.<UniqueKey<SubSiteRecord>>asList(Keys.SUB_SITE_PKEY, Keys.SUB_SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SubSiteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubSiteRecord, ?>>asList(Keys.SUB_SITE__SUB_SITE_SITE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubSite as(String alias) {
        return new SubSite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubSite as(Name alias) {
        return new SubSite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubSite rename(String name) {
        return new SubSite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubSite rename(Name name) {
        return new SubSite(name, null);
    }
}
