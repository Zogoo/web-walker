/*
 * This file is generated by jOOQ.
*/
package com.walker.webwalker.dao.tables;


import com.walker.webwalker.dao.Indexes;
import com.walker.webwalker.dao.Keys;
import com.walker.webwalker.dao.Public;
import com.walker.webwalker.dao.tables.records.PageRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Page extends TableImpl<PageRecord> {

    private static final long serialVersionUID = -131774419;

    /**
     * The reference instance of <code>public.page</code>
     */
    public static final Page PAGE = new Page();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageRecord> getRecordType() {
        return PageRecord.class;
    }

    /**
     * The column <code>public.page.id</code>.
     */
    public final TableField<PageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('page_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.page.page_url</code>.
     */
    public final TableField<PageRecord, String> PAGE_URL = createField("page_url", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.page.site_id</code>.
     */
    public final TableField<PageRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.page.has_diff</code>.
     */
    public final TableField<PageRecord, Boolean> HAS_DIFF = createField("has_diff", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.page.created_at</code>.
     */
    public final TableField<PageRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.page.updated_at</code>.
     */
    public final TableField<PageRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.page</code> table reference
     */
    public Page() {
        this(DSL.name("page"), null);
    }

    /**
     * Create an aliased <code>public.page</code> table reference
     */
    public Page(String alias) {
        this(DSL.name(alias), PAGE);
    }

    /**
     * Create an aliased <code>public.page</code> table reference
     */
    public Page(Name alias) {
        this(alias, PAGE);
    }

    private Page(Name alias, Table<PageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Page(Name alias, Table<PageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAGE_PKEY, Indexes.SUB_SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PageRecord> getPrimaryKey() {
        return Keys.PAGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PageRecord>> getKeys() {
        return Arrays.<UniqueKey<PageRecord>>asList(Keys.PAGE_PKEY, Keys.SUB_SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PageRecord, ?>>asList(Keys.PAGE__PAGE_SITE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page as(String alias) {
        return new Page(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page as(Name alias) {
        return new Page(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Page rename(String name) {
        return new Page(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Page rename(Name name) {
        return new Page(name, null);
    }
}
