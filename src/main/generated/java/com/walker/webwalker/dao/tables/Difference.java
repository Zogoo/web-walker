/*
 * This file is generated by jOOQ.
*/
package com.walker.webwalker.dao.tables;


import com.walker.webwalker.dao.Indexes;
import com.walker.webwalker.dao.Keys;
import com.walker.webwalker.dao.Public;
import com.walker.webwalker.dao.tables.records.DifferenceRecord;

import java.sql.Timestamp;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Difference extends TableImpl<DifferenceRecord> {

    private static final long serialVersionUID = -30285060;

    /**
     * The reference instance of <code>public.difference</code>
     */
    public static final Difference DIFFERENCE = new Difference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DifferenceRecord> getRecordType() {
        return DifferenceRecord.class;
    }

    /**
     * The column <code>public.difference.id</code>.
     */
    public final TableField<DifferenceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('difference_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.difference.diff</code>.
     */
    public final TableField<DifferenceRecord, String> DIFF = createField("diff", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.difference.content_id</code>.
     */
    public final TableField<DifferenceRecord, Integer> CONTENT_ID = createField("content_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.difference.compared_date</code>.
     */
    public final TableField<DifferenceRecord, OffsetDateTime> COMPARED_DATE = createField("compared_date", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.difference.created_at</code>.
     */
    public final TableField<DifferenceRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.difference.updated_at</code>.
     */
    public final TableField<DifferenceRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.difference</code> table reference
     */
    public Difference() {
        this(DSL.name("difference"), null);
    }

    /**
     * Create an aliased <code>public.difference</code> table reference
     */
    public Difference(String alias) {
        this(DSL.name(alias), DIFFERENCE);
    }

    /**
     * Create an aliased <code>public.difference</code> table reference
     */
    public Difference(Name alias) {
        this(alias, DIFFERENCE);
    }

    private Difference(Name alias, Table<DifferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Difference(Name alias, Table<DifferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DIFFERENCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DifferenceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIFFERENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DifferenceRecord> getPrimaryKey() {
        return Keys.DIFFERENCE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DifferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<DifferenceRecord>>asList(Keys.DIFFERENCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DifferenceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DifferenceRecord, ?>>asList(Keys.DIFFERENCE__DIFFERENCE_CONTENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Difference as(String alias) {
        return new Difference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Difference as(Name alias) {
        return new Difference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Difference rename(String name) {
        return new Difference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Difference rename(Name name) {
        return new Difference(name, null);
    }
}
