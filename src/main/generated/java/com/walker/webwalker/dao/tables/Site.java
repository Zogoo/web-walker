/*
 * This file is generated by jOOQ.
*/
package com.walker.webwalker.dao.tables;


import com.walker.webwalker.dao.Indexes;
import com.walker.webwalker.dao.Keys;
import com.walker.webwalker.dao.Public;
import com.walker.webwalker.dao.tables.records.SiteRecord;

import java.sql.Timestamp;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Site extends TableImpl<SiteRecord> {

    private static final long serialVersionUID = 1997900969;

    /**
     * The reference instance of <code>public.site</code>
     */
    public static final Site SITE = new Site();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SiteRecord> getRecordType() {
        return SiteRecord.class;
    }

    /**
     * The column <code>public.site.id</code>.
     */
    public final TableField<SiteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('site_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.site.site_url</code>.
     */
    public final TableField<SiteRecord, String> SITE_URL = createField("site_url", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.site.confirmed_at</code>.
     */
    public final TableField<SiteRecord, OffsetDateTime> CONFIRMED_AT = createField("confirmed_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.site.created_at</code>.
     */
    public final TableField<SiteRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.site.updated_at</code>.
     */
    public final TableField<SiteRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.site</code> table reference
     */
    public Site() {
        this(DSL.name("site"), null);
    }

    /**
     * Create an aliased <code>public.site</code> table reference
     */
    public Site(String alias) {
        this(DSL.name(alias), SITE);
    }

    /**
     * Create an aliased <code>public.site</code> table reference
     */
    public Site(Name alias) {
        this(alias, SITE);
    }

    private Site(Name alias, Table<SiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Site(Name alias, Table<SiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SITE_PKEY, Indexes.SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SiteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SiteRecord> getPrimaryKey() {
        return Keys.SITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SiteRecord>> getKeys() {
        return Arrays.<UniqueKey<SiteRecord>>asList(Keys.SITE_PKEY, Keys.SITES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Site as(String alias) {
        return new Site(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Site as(Name alias) {
        return new Site(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(String name) {
        return new Site(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(Name name) {
        return new Site(name, null);
    }
}
